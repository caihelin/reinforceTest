import groovy.xml.*

apply plugin: 'com.android.application'

android {
    signingConfigs {
        config {
            keyAlias 'Dummy'
            keyPassword '123456'
            storeFile file('E:/reinforceTest/reinforceTestKey.jks')
            storePassword '123456'
        }
    }
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.example.superxlcr.reinforcetest"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            signingConfig signingConfigs.config
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
}

// 初始化变量
ext {
    WORKSPACE = rootDir.getAbsolutePath() + '/workspace/';
    TOOLS_DIR = WORKSPACE + 'tools/';

    SRC_APK = 'src.apk'; // 源程序的apk名称
    SRC_DIR = 'src'; // 源程序apk解压目录

    REIN_FORCE_APK = 'reinforce.apk'; // 提供解壳dex的apk名称
    REIN_FORCE_DEX = 'reinforce.dex' // 解壳dex
    REIN_FORCE_DIR = 'reinforce'; // 解壳apk解压目录

    OUTPUT_DEX = 'classes.dex'; // 输出dex
    OUTPUT_UNSIGNED_APK = 'output-unsigned.apk'; // 输出未签名apk
    OUTPUT_APK = 'output.apk'; // 输出apk

    APK_TOOL = 'apktool_2.2.3.jar';
}


task buildReinforceApk(dependsOn: 'assembleDebug') << {
//    // 清理目录
//    cleanDir();
//    // 解压apk
//    decodeApk();
    // 修改Manifest文件
    modifyManifest();
//    // 复制解壳dex，重命名
//    copy {
//        from WORKSPACE + 'src/classes.dex'
//        into WORKSPACE
//        rename {
//            REIN_FORCE_DEX
//        }
//    }
//    // 加壳
//    OutputStream os = new ByteArrayOutputStream();
//    exec {
//        workingDir TOOLS_DIR
//        commandLine 'java', '-cp', '.', 'DexTools', WORKSPACE + SRC_APK, WORKSPACE + REIN_FORCE_DEX, WORKSPACE + OUTPUT_DEX
//        standardOutput = os;
//    }
//    println os.toString()
//    // 替换原dex
//    file(WORKSPACE + 'src/' + OUTPUT_DEX).delete();
//    copy {
//        from WORKSPACE + OUTPUT_DEX
//        into WORKSPACE + 'src'
//    }
//    // 打包apk
//    exec {
//        workingDir WORKSPACE
//        commandLine 'java', '-jar', TOOLS_DIR + APK_TOOL, 'b', 'src'
//    }
//    // 复制打包完的apk
//    copy {
//        from WORKSPACE + 'src/dist/' + REIN_FORCE_APK
//        into WORKSPACE
//        rename {
//            'output-unsigned.apk'
//        }
//    }
//    exec {
//        workingDir WORKSPACE
//        commandLine 'jarsigner', '-sigalg', 'MD5withRSA',
//                '-digestalg', 'SHA1',
//                '-keystore', rootDir.getAbsolutePath() + '/reinforceTestKey.jks',
//                '-storepass', '123456',
//                '-signedjar', 'output.apk', 'output-unsigned.apk', 'Dummy'
//    }
}

private void cleanDir() {
    // 清理目录
    file(WORKSPACE + REIN_FORCE_APK).delete();
    file(WORKSPACE + REIN_FORCE_DEX).delete();
    file(WORKSPACE + OUTPUT_DEX).delete();
    file(WORKSPACE + SRC_DIR).deleteDir();
    file(WORKSPACE + REIN_FORCE_DIR).deleteDir();
    file(WORKSPACE + OUTPUT_UNSIGNED_APK).delete();
    file(WORKSPACE + OUTPUT_APK).delete();
}

private void decodeApk() {
    // 复制解壳apk
    copy {
        from 'build/outputs/apk/app-debug.apk'
        into WORKSPACE
        rename {
            REIN_FORCE_APK
        }
    }
    // 解压解壳apk
    exec {
        workingDir WORKSPACE
        commandLine 'java', '-jar', TOOLS_DIR + APK_TOOL, 'd', '-s', REIN_FORCE_APK, '-o', REIN_FORCE_DIR
    }
    // 解压源apk
    exec {
        workingDir WORKSPACE
        commandLine 'java', '-jar', TOOLS_DIR + APK_TOOL, 'd', '-s', SRC_APK, '-o', SRC_DIR
    }
}

private void modifyManifest() {
    // 声明命名空间
    def android = new Namespace('http://schemas.android.com/apk/res/android', 'android')

    // 获取源apk application name
    def parser = new XmlParser()
    def srcManifest = parser.parse("${WORKSPACE}${SRC_DIR}/AndroidManifest.xml")
    def srcApp = srcManifest.application[0].attribute(android.name)

    // 获取壳apk application name
    def reinforceManifest = new XmlParser().parse("${WORKSPACE}${REIN_FORCE_DIR}/AndroidManifest.xml")
    def reinforceApp = reinforceManifest.application[0].attribute(android.name)

    // 合成新Manifest
    // 新建meta-data节点
    parser.createNode(
            srcManifest.application[0],
            new QName('http://schemas.android.com/apk/res/android', 'meta-data'),
            [
                    (android.name):'APPLICATION_CLASS_NAME',
                    (android.value):srcApp
            ]
    )

    // 修改application节点
    srcManifest.application[0].attributes().put(android.name, reinforceApp)
    println srcManifest.application[0].attribute(android.name)

    Writer writer = new FileWriter("${WORKSPACE}${SRC_DIR}/test.xml")
    writer.write(XmlUtil.serialize(srcManifest))
    writer.flush()
}